FROM alpine AS build

WORKDIR /home

# 必要なパッケージのインストール
RUN apk update && \
    apk add --no-cache \
        build-base \
        git \
        wget \
        ca-certificates \
        sudo \
        pkgconfig \
        make \
        cmake \
        opencv-dev \
        opencv \
        libtbb-dev \
        ffmpeg-dev \
        gtk+2.0-dev \
        freetype-dev \
        harfbuzz-dev

# Goのインストール
RUN wget https://go.dev/dl/go1.23.2.linux-arm64.tar.gz && \
    tar -C /usr/local -xzf go1.23.2.linux-arm64.tar.gz && \
    rm go1.23.2.linux-arm64.tar.gz

ENV PATH=$PATH:/usr/local/go/bin
ENV PKG_CONFIG_PATH=/usr/lib/pkgconfig

RUN apk add curl

WORKDIR /src
RUN curl -Lo /src/aws-lambda-rie https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie-arm64 && \
    chmod +x /src/aws-lambda-rie

# Goのバージョン確認
RUN go version

# gocvのインストール
# RUN go install -v gocv.io/x/gocv@latest

WORKDIR /src

# Goモジュールのコピーと依存関係のダウンロード
COPY go.mod .
COPY go.sum .
RUN go mod download -x

# ソースコードのコピーとビルド
COPY . .
RUN CGO_ENABLED=1 GOARCH=${TARGETARCH} go build -o /bin/main ./cmd/lambda/main.go

# ランタイムステージ
FROM alpine

# 実行時の最小限の依存関係をインストール
RUN apk update && \
    apk add --no-cache \
        ca-certificates \
        opencv \
        libtbb \
        freetype \
        harfbuzz \
        gtk+2.0 \
        ffmpeg

# RUN ldconfig
RUN apk add libopencv_aruco
RUN apk add libopencv_photo
RUN apk add libopencv_video

# ビルドしたバイナリをコピー
COPY --from=build /bin/main /bin/main

COPY --from=build /src/aws-lambda-rie /usr/local/bin/aws-lambda-rie

# エントリーポイントの設定
ENTRYPOINT ["/bin/main"]
