/*
 * My Project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
    "io";    "errors";	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GolioAPIController binds http requests to an api service and writes the service results to the http response
type GolioAPIController struct {
	service GolioAPIServicer
	errorHandler ErrorHandler
}

// GolioAPIOption for how the controller is set up.
type GolioAPIOption func(*GolioAPIController)

// WithGolioAPIErrorHandler inject ErrorHandler into controller
func WithGolioAPIErrorHandler(h ErrorHandler) GolioAPIOption {
	return func(c *GolioAPIController) {
		c.errorHandler = h
	}
}

// NewGolioAPIController creates a default api controller
func NewGolioAPIController(s GolioAPIServicer, opts ...GolioAPIOption) Router {
	controller := &GolioAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GolioAPIController
func (c *GolioAPIController) Routes() Routes {
	return Routes{
		"ArticlesArticleIdAiPut": Route{
			strings.ToUpper("Put"),
			"/articles/{article_id}/ai",
			c.ArticlesArticleIdAiPut,
		},
		"ArticlesArticleIdGet": Route{
			strings.ToUpper("Get"),
			"/articles/{article_id}",
			c.ArticlesArticleIdGet,
		},
		"ArticlesArticleIdPut": Route{
			strings.ToUpper("Put"),
			"/articles/{article_id}",
			c.ArticlesArticleIdPut,
		},
		"ArticlesGet": Route{
			strings.ToUpper("Get"),
			"/articles",
			c.ArticlesGet,
		},
		"ArticlesPost": Route{
			strings.ToUpper("Post"),
			"/articles",
			c.ArticlesPost,
		},
		"HelloGet": Route{
			strings.ToUpper("Get"),
			"/hello",
			c.HelloGet,
		},
		"MediaGet": Route{
			strings.ToUpper("Get"),
			"/media",
			c.MediaGet,
		},
		"MediaMediumIdDelete": Route{
			strings.ToUpper("Delete"),
			"/media/{medium_id}",
			c.MediaMediumIdDelete,
		},
		"MediaMediumIdGet": Route{
			strings.ToUpper("Get"),
			"/media/{medium_id}",
			c.MediaMediumIdGet,
		},
		"MediaPost": Route{
			strings.ToUpper("Post"),
			"/media",
			c.MediaPost,
		},
	}
}

// ArticlesArticleIdAiPut - 記事AI更新
func (c *GolioAPIController) ArticlesArticleIdAiPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	articlesArticleIdAiPutRequestParam := ArticlesArticleIdAiPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articlesArticleIdAiPutRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticlesArticleIdAiPutRequestRequired(articlesArticleIdAiPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticlesArticleIdAiPutRequestConstraints(articlesArticleIdAiPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticlesArticleIdAiPut(r.Context(), articleIdParam, articlesArticleIdAiPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesArticleIdGet - 記事取得
func (c *GolioAPIController) ArticlesArticleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	result, err := c.service.ArticlesArticleIdGet(r.Context(), articleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesArticleIdPut - 記事更新
func (c *GolioAPIController) ArticlesArticleIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	articlesPostRequestParam := ArticlesPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articlesPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticlesPostRequestRequired(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticlesPostRequestConstraints(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticlesArticleIdPut(r.Context(), articleIdParam, articlesPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesGet - 記事一覧取得
func (c *GolioAPIController) ArticlesGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var searchTitleTextParam string
	if query.Has("search_title_text") {
		param := query.Get("search_title_text")

		searchTitleTextParam = param
	} else {
	}
	result, err := c.service.ArticlesGet(r.Context(), offsetParam, limitParam, searchTitleTextParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesPost - 記事投稿
func (c *GolioAPIController) ArticlesPost(w http.ResponseWriter, r *http.Request) {
	articlesPostRequestParam := ArticlesPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articlesPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticlesPostRequestRequired(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticlesPostRequestConstraints(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticlesPost(r.Context(), articlesPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HelloGet - hello
func (c *GolioAPIController) HelloGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HelloGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaGet - メディア一覧取得
func (c *GolioAPIController) MediaGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.MediaGet(r.Context(), offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaMediumIdDelete - メディアの削除
func (c *GolioAPIController) MediaMediumIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediumIdParam := params["medium_id"]
	if mediumIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"medium_id"}, nil)
		return
	}
	result, err := c.service.MediaMediumIdDelete(r.Context(), mediumIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaMediumIdGet - メディアの取得
func (c *GolioAPIController) MediaMediumIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediumIdParam := params["medium_id"]
	if mediumIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"medium_id"}, nil)
		return
	}
	result, err := c.service.MediaMediumIdGet(r.Context(), mediumIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaPost - メディアの登録
func (c *GolioAPIController) MediaPost(w http.ResponseWriter, r *http.Request) {
	mediaPostRequestParam := MediaPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&mediaPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMediaPostRequestRequired(mediaPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMediaPostRequestConstraints(mediaPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MediaPost(r.Context(), mediaPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
