/*
 * My Project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GolioAPIController binds http requests to an api service and writes the service results to the http response
type GolioAPIController struct {
	service      GolioAPIServicer
	errorHandler ErrorHandler
}

// GolioAPIOption for how the controller is set up.
type GolioAPIOption func(*GolioAPIController)

// WithGolioAPIErrorHandler inject ErrorHandler into controller
func WithGolioAPIErrorHandler(h ErrorHandler) GolioAPIOption {
	return func(c *GolioAPIController) {
		c.errorHandler = h
	}
}

// NewGolioAPIController creates a default api controller
func NewGolioAPIController(s GolioAPIServicer, opts ...GolioAPIOption) Router {
	controller := &GolioAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GolioAPIController
func (c *GolioAPIController) Routes() Routes {
	return Routes{
		"ArticlesArticleIdGet": Route{
			strings.ToUpper("Get"),
			"/articles/{article_id}",
			c.ArticlesArticleIdGet,
		},
		"ArticlesGet": Route{
			strings.ToUpper("Get"),
			"/articles",
			c.ArticlesGet,
		},
		"ArticlesPost": Route{
			strings.ToUpper("Post"),
			"/articles",
			c.ArticlesPost,
		},
		"ArticlesPut": Route{
			strings.ToUpper("Put"),
			"/articles",
			c.ArticlesPut,
		},
		"AuthGoogleOauthCallbackGet": Route{
			strings.ToUpper("Get"),
			"/auth/google-oauth/callback",
			c.AuthGoogleOauthCallbackGet,
		},
		"HelloGet": Route{
			strings.ToUpper("Get"),
			"/hello",
			c.HelloGet,
		},
		"JwtDelete": Route{
			strings.ToUpper("Delete"),
			"/jwt",
			c.JwtDelete,
		},
		"JwtPost": Route{
			strings.ToUpper("Post"),
			"/jwt",
			c.JwtPost,
		},
		"UserPost": Route{
			strings.ToUpper("Post"),
			"/user",
			c.UserPost,
		},
	}
}

// ArticlesArticleIdGet - 記事取得
func (c *GolioAPIController) ArticlesArticleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	result, err := c.service.ArticlesArticleIdGet(r.Context(), articleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesGet - 記事一覧取得
func (c *GolioAPIController) ArticlesGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.ArticlesGet(r.Context(), offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesPost - 記事投稿
func (c *GolioAPIController) ArticlesPost(w http.ResponseWriter, r *http.Request) {
	articlesPostRequestParam := ArticlesPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articlesPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticlesPostRequestRequired(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticlesPostRequestConstraints(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticlesPost(r.Context(), articlesPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesPut - 記事更新
func (c *GolioAPIController) ArticlesPut(w http.ResponseWriter, r *http.Request) {
	articlesPutRequestParam := ArticlesPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articlesPutRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticlesPutRequestRequired(articlesPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticlesPutRequestConstraints(articlesPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticlesPut(r.Context(), articlesPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AuthGoogleOauthCallbackGet - Google OAuth2.0からのコールバックで叩かれるもの
func (c *GolioAPIController) AuthGoogleOauthCallbackGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var codeParam string
	if query.Has("code") {
		param := query.Get("code")

		codeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "code"}, nil)
		return
	}
	var scopeParam string
	if query.Has("scope") {
		param := query.Get("scope")

		scopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "scope"}, nil)
		return
	}
	var authuserParam string
	if query.Has("authuser") {
		param := query.Get("authuser")

		authuserParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "authuser"}, nil)
		return
	}
	var promptParam string
	if query.Has("prompt") {
		param := query.Get("prompt")

		promptParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "prompt"}, nil)
		return
	}
	result, err := c.service.AuthGoogleOauthCallbackGet(r.Context(), codeParam, scopeParam, authuserParam, promptParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HelloGet - hello
func (c *GolioAPIController) HelloGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HelloGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// JwtDelete - JWTログアウト
func (c *GolioAPIController) JwtDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.JwtDelete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// JwtPost - JWT認証
func (c *GolioAPIController) JwtPost(w http.ResponseWriter, r *http.Request) {
	jwtPostRequestParam := JwtPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jwtPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJwtPostRequestRequired(jwtPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertJwtPostRequestConstraints(jwtPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.JwtPost(r.Context(), jwtPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserPost - ユーザー作成
func (c *GolioAPIController) UserPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UserPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
