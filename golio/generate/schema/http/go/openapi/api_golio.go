// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * folio
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package openapi

import (
    "io";    "errors";	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GolioAPIController binds http requests to an api service and writes the service results to the http response
type GolioAPIController struct {
	service GolioAPIServicer
	errorHandler ErrorHandler
}

// GolioAPIOption for how the controller is set up.
type GolioAPIOption func(*GolioAPIController)

// WithGolioAPIErrorHandler inject ErrorHandler into controller
func WithGolioAPIErrorHandler(h ErrorHandler) GolioAPIOption {
	return func(c *GolioAPIController) {
		c.errorHandler = h
	}
}

// NewGolioAPIController creates a default api controller
func NewGolioAPIController(s GolioAPIServicer, opts ...GolioAPIOption) *GolioAPIController {
	controller := &GolioAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GolioAPIController
func (c *GolioAPIController) Routes() Routes {
	return Routes{
		"ArticleTagsGet": Route{
			strings.ToUpper("Get"),
			"/article_tags",
			c.ArticleTagsGet,
		},
		"ArticleTagsPost": Route{
			strings.ToUpper("Post"),
			"/article_tags",
			c.ArticleTagsPost,
		},
		"ArticleTagsTagIdDelete": Route{
			strings.ToUpper("Delete"),
			"/article_tags/{tag_id}",
			c.ArticleTagsTagIdDelete,
		},
		"ArticleTagsTagIdPut": Route{
			strings.ToUpper("Put"),
			"/article_tags/{tag_id}",
			c.ArticleTagsTagIdPut,
		},
		"ArticlesAiPost": Route{
			strings.ToUpper("Post"),
			"/articles/ai",
			c.ArticlesAiPost,
		},
		"ArticlesArticleIdAiPut": Route{
			strings.ToUpper("Put"),
			"/articles/{article_id}/ai",
			c.ArticlesArticleIdAiPut,
		},
		"ArticlesArticleIdGet": Route{
			strings.ToUpper("Get"),
			"/articles/{article_id}",
			c.ArticlesArticleIdGet,
		},
		"ArticlesArticleIdPut": Route{
			strings.ToUpper("Put"),
			"/articles/{article_id}",
			c.ArticlesArticleIdPut,
		},
		"ArticlesGet": Route{
			strings.ToUpper("Get"),
			"/articles",
			c.ArticlesGet,
		},
		"ArticlesPost": Route{
			strings.ToUpper("Post"),
			"/articles",
			c.ArticlesPost,
		},
		"EnglishDictionaryWordBookmarkDelete": Route{
			strings.ToUpper("Delete"),
			"/english_dictionary/{word}/bookmark",
			c.EnglishDictionaryWordBookmarkDelete,
		},
		"EnglishDictionaryWordBookmarkPut": Route{
			strings.ToUpper("Put"),
			"/english_dictionary/{word}/bookmark",
			c.EnglishDictionaryWordBookmarkPut,
		},
		"EnglishDictionaryWordGet": Route{
			strings.ToUpper("Get"),
			"/english_dictionary/{word}",
			c.EnglishDictionaryWordGet,
		},
		"HelloGet": Route{
			strings.ToUpper("Get"),
			"/hello",
			c.HelloGet,
		},
		"MediaGet": Route{
			strings.ToUpper("Get"),
			"/media",
			c.MediaGet,
		},
		"MediaMediumIdDelete": Route{
			strings.ToUpper("Delete"),
			"/media/{medium_id}",
			c.MediaMediumIdDelete,
		},
		"MediaMediumIdGet": Route{
			strings.ToUpper("Get"),
			"/media/{medium_id}",
			c.MediaMediumIdGet,
		},
		"MediaPost": Route{
			strings.ToUpper("Post"),
			"/media",
			c.MediaPost,
		},
		"TasksIdGet": Route{
			strings.ToUpper("Get"),
			"/tasks/{id}",
			c.TasksIdGet,
		},
		"TasksIdPut": Route{
			strings.ToUpper("Put"),
			"/tasks/{id}",
			c.TasksIdPut,
		},
		"TasksPost": Route{
			strings.ToUpper("Post"),
			"/tasks",
			c.TasksPost,
		},
		"TranslationPost": Route{
			strings.ToUpper("Post"),
			"/translation",
			c.TranslationPost,
		},
	}
}

// ArticleTagsGet - 記事タグ一覧取得
func (c *GolioAPIController) ArticleTagsGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var searchTextParam string
	if query.Has("search_text") {
		param := query.Get("search_text")

		searchTextParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.ArticleTagsGet(r.Context(), searchTextParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticleTagsPost - 記事タグの作成
func (c *GolioAPIController) ArticleTagsPost(w http.ResponseWriter, r *http.Request) {
	articleTagsPostRequestParam := ArticleTagsPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articleTagsPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticleTagsPostRequestRequired(articleTagsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticleTagsPostRequestConstraints(articleTagsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticleTagsPost(r.Context(), articleTagsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticleTagsTagIdDelete - 記事タグの削除
func (c *GolioAPIController) ArticleTagsTagIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tagIdParam := params["tag_id"]
	if tagIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tag_id"}, nil)
		return
	}
	result, err := c.service.ArticleTagsTagIdDelete(r.Context(), tagIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticleTagsTagIdPut - 記事タグの更新
func (c *GolioAPIController) ArticleTagsTagIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tagIdParam := params["tag_id"]
	if tagIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tag_id"}, nil)
		return
	}
	articleTagsTagIdPutRequestParam := ArticleTagsTagIdPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articleTagsTagIdPutRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticleTagsTagIdPutRequestRequired(articleTagsTagIdPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticleTagsTagIdPutRequestConstraints(articleTagsTagIdPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticleTagsTagIdPut(r.Context(), tagIdParam, articleTagsTagIdPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesAiPost - 記事AI作成
func (c *GolioAPIController) ArticlesAiPost(w http.ResponseWriter, r *http.Request) {
	articlesAiPostRequestParam := ArticlesAiPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articlesAiPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticlesAiPostRequestRequired(articlesAiPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticlesAiPostRequestConstraints(articlesAiPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticlesAiPost(r.Context(), articlesAiPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesArticleIdAiPut - 記事AI更新
func (c *GolioAPIController) ArticlesArticleIdAiPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	articlesArticleIdAiPutRequestParam := ArticlesArticleIdAiPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articlesArticleIdAiPutRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticlesArticleIdAiPutRequestRequired(articlesArticleIdAiPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticlesArticleIdAiPutRequestConstraints(articlesArticleIdAiPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticlesArticleIdAiPut(r.Context(), articleIdParam, articlesArticleIdAiPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesArticleIdGet - 記事取得
func (c *GolioAPIController) ArticlesArticleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	result, err := c.service.ArticlesArticleIdGet(r.Context(), articleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesArticleIdPut - 記事更新
func (c *GolioAPIController) ArticlesArticleIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	articlesPostRequestParam := ArticlesPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articlesPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticlesPostRequestRequired(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticlesPostRequestConstraints(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticlesArticleIdPut(r.Context(), articleIdParam, articlesPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesGet - 記事一覧取得
func (c *GolioAPIController) ArticlesGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var searchTitleTextParam string
	if query.Has("search_title_text") {
		param := query.Get("search_title_text")

		searchTitleTextParam = param
	} else {
	}
	var tagsParam []string
	if query.Has("tags") {
		tagsParam = strings.Split(query.Get("tags"), ",")
	}
	result, err := c.service.ArticlesGet(r.Context(), offsetParam, limitParam, searchTitleTextParam, tagsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticlesPost - 記事投稿
func (c *GolioAPIController) ArticlesPost(w http.ResponseWriter, r *http.Request) {
	articlesPostRequestParam := ArticlesPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&articlesPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArticlesPostRequestRequired(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArticlesPostRequestConstraints(articlesPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ArticlesPost(r.Context(), articlesPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EnglishDictionaryWordBookmarkDelete - 辞書で引いた単語ブックマークを削除
func (c *GolioAPIController) EnglishDictionaryWordBookmarkDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	wordParam := params["word"]
	if wordParam == "" {
		c.errorHandler(w, r, &RequiredError{"word"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.EnglishDictionaryWordBookmarkDelete(r.Context(), wordParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EnglishDictionaryWordBookmarkPut - 辞書で引いた単語ブックマークを作成
func (c *GolioAPIController) EnglishDictionaryWordBookmarkPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	wordParam := params["word"]
	if wordParam == "" {
		c.errorHandler(w, r, &RequiredError{"word"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.EnglishDictionaryWordBookmarkPut(r.Context(), wordParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// EnglishDictionaryWordGet - 英単語を辞書で引く
func (c *GolioAPIController) EnglishDictionaryWordGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	wordParam := params["word"]
	if wordParam == "" {
		c.errorHandler(w, r, &RequiredError{"word"}, nil)
		return
	}
	result, err := c.service.EnglishDictionaryWordGet(r.Context(), wordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// HelloGet - hello
func (c *GolioAPIController) HelloGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HelloGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaGet - メディア一覧取得
func (c *GolioAPIController) MediaGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.MediaGet(r.Context(), offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaMediumIdDelete - メディアの削除
func (c *GolioAPIController) MediaMediumIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediumIdParam := params["medium_id"]
	if mediumIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"medium_id"}, nil)
		return
	}
	result, err := c.service.MediaMediumIdDelete(r.Context(), mediumIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaMediumIdGet - メディアの取得
func (c *GolioAPIController) MediaMediumIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediumIdParam := params["medium_id"]
	if mediumIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"medium_id"}, nil)
		return
	}
	result, err := c.service.MediaMediumIdGet(r.Context(), mediumIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaPost - メディアの登録
func (c *GolioAPIController) MediaPost(w http.ResponseWriter, r *http.Request) {
	mediaPostRequestParam := MediaPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&mediaPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMediaPostRequestRequired(mediaPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMediaPostRequestConstraints(mediaPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MediaPost(r.Context(), mediaPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TasksIdGet - タスク詳細取得
func (c *GolioAPIController) TasksIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.TasksIdGet(r.Context(), idParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TasksIdPut - タスク編集
func (c *GolioAPIController) TasksIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	tasksPostRequestParam := TasksPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tasksPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTasksPostRequestRequired(tasksPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTasksPostRequestConstraints(tasksPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TasksIdPut(r.Context(), idParam, tasksPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TasksPost - タスク作成
func (c *GolioAPIController) TasksPost(w http.ResponseWriter, r *http.Request) {
	tasksPostRequestParam := TasksPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tasksPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTasksPostRequestRequired(tasksPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTasksPostRequestConstraints(tasksPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TasksPost(r.Context(), tasksPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TranslationPost - 翻訳
func (c *GolioAPIController) TranslationPost(w http.ResponseWriter, r *http.Request) {
	translationPostRequestParam := TranslationPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&translationPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTranslationPostRequestRequired(translationPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTranslationPostRequestConstraints(translationPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TranslationPost(r.Context(), translationPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
