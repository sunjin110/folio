/*
 * My Project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// AuthAPIController binds http requests to an api service and writes the service results to the http response
type AuthAPIController struct {
	service      AuthAPIServicer
	errorHandler ErrorHandler
}

// AuthAPIOption for how the controller is set up.
type AuthAPIOption func(*AuthAPIController)

// WithAuthAPIErrorHandler inject ErrorHandler into controller
func WithAuthAPIErrorHandler(h ErrorHandler) AuthAPIOption {
	return func(c *AuthAPIController) {
		c.errorHandler = h
	}
}

// NewAuthAPIController creates a default api controller
func NewAuthAPIController(s AuthAPIServicer, opts ...AuthAPIOption) Router {
	controller := &AuthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthAPIController
func (c *AuthAPIController) Routes() Routes {
	return Routes{
		"AuthGoogleOauthCallbackGet": Route{
			strings.ToUpper("Get"),
			"/auth/google-oauth/callback",
			c.AuthGoogleOauthCallbackGet,
		},
		"JwtDelete": Route{
			strings.ToUpper("Delete"),
			"/jwt",
			c.JwtDelete,
		},
		"JwtPost": Route{
			strings.ToUpper("Post"),
			"/jwt",
			c.JwtPost,
		},
	}
}

// AuthGoogleOauthCallbackGet - Google OAuth2.0からのコールバックで叩かれるもの
func (c *AuthAPIController) AuthGoogleOauthCallbackGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var codeParam string
	if query.Has("code") {
		param := query.Get("code")

		codeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "code"}, nil)
		return
	}
	var scopeParam string
	if query.Has("scope") {
		param := query.Get("scope")

		scopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "scope"}, nil)
		return
	}
	var authuserParam string
	if query.Has("authuser") {
		param := query.Get("authuser")

		authuserParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "authuser"}, nil)
		return
	}
	var promptParam string
	if query.Has("prompt") {
		param := query.Get("prompt")

		promptParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "prompt"}, nil)
		return
	}
	result, err := c.service.AuthGoogleOauthCallbackGet(r.Context(), codeParam, scopeParam, authuserParam, promptParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// JwtDelete - JWTログアウト
func (c *AuthAPIController) JwtDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.JwtDelete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// JwtPost - JWT認証
func (c *AuthAPIController) JwtPost(w http.ResponseWriter, r *http.Request) {
	jwtPostRequestParam := JwtPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jwtPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJwtPostRequestRequired(jwtPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertJwtPostRequestConstraints(jwtPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.JwtPost(r.Context(), jwtPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
