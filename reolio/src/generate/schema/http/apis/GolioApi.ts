/* tslint:disable */
/* eslint-disable */
/**
 * My Project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArticlesAiPost200Response,
  ArticlesAiPostRequest,
  ArticlesArticleIdAiPut200Response,
  ArticlesArticleIdAiPutRequest,
  ArticlesArticleIdGet200Response,
  ArticlesGet200Response,
  ArticlesGet400Response,
  ArticlesPost200Response,
  ArticlesPostRequest,
  HelloGet200Response,
  MediaGet200Response,
  MediaMediumIdGet200Response,
  MediaPost200Response,
  MediaPostRequest,
  TranslationPost200Response,
  TranslationPostRequest,
} from '../models/index';
import {
    ArticlesAiPost200ResponseFromJSON,
    ArticlesAiPost200ResponseToJSON,
    ArticlesAiPostRequestFromJSON,
    ArticlesAiPostRequestToJSON,
    ArticlesArticleIdAiPut200ResponseFromJSON,
    ArticlesArticleIdAiPut200ResponseToJSON,
    ArticlesArticleIdAiPutRequestFromJSON,
    ArticlesArticleIdAiPutRequestToJSON,
    ArticlesArticleIdGet200ResponseFromJSON,
    ArticlesArticleIdGet200ResponseToJSON,
    ArticlesGet200ResponseFromJSON,
    ArticlesGet200ResponseToJSON,
    ArticlesGet400ResponseFromJSON,
    ArticlesGet400ResponseToJSON,
    ArticlesPost200ResponseFromJSON,
    ArticlesPost200ResponseToJSON,
    ArticlesPostRequestFromJSON,
    ArticlesPostRequestToJSON,
    HelloGet200ResponseFromJSON,
    HelloGet200ResponseToJSON,
    MediaGet200ResponseFromJSON,
    MediaGet200ResponseToJSON,
    MediaMediumIdGet200ResponseFromJSON,
    MediaMediumIdGet200ResponseToJSON,
    MediaPost200ResponseFromJSON,
    MediaPost200ResponseToJSON,
    MediaPostRequestFromJSON,
    MediaPostRequestToJSON,
    TranslationPost200ResponseFromJSON,
    TranslationPost200ResponseToJSON,
    TranslationPostRequestFromJSON,
    TranslationPostRequestToJSON,
} from '../models/index';

export interface ArticlesAiPostOperationRequest {
    articlesAiPostRequest?: ArticlesAiPostRequest;
}

export interface ArticlesArticleIdAiPutOperationRequest {
    articleId: string;
    articlesArticleIdAiPutRequest?: ArticlesArticleIdAiPutRequest;
}

export interface ArticlesArticleIdGetRequest {
    articleId: string;
}

export interface ArticlesArticleIdPutRequest {
    articleId: string;
    articlesPostRequest?: ArticlesPostRequest;
}

export interface ArticlesGetRequest {
    offset?: number;
    limit?: number;
    searchTitleText?: string;
}

export interface ArticlesPostOperationRequest {
    articlesPostRequest?: ArticlesPostRequest;
}

export interface MediaGetRequest {
    offset?: number;
    limit?: number;
}

export interface MediaMediumIdDeleteRequest {
    mediumId: string;
}

export interface MediaMediumIdGetRequest {
    mediumId: string;
}

export interface MediaPostOperationRequest {
    mediaPostRequest?: MediaPostRequest;
}

export interface TranslationPostOperationRequest {
    translationPostRequest?: TranslationPostRequest;
}

/**
 * 
 */
export class GolioApi extends runtime.BaseAPI {

    /**
     * AIに命令を下して、記事を作成するAPIです
     * 記事AI作成
     */
    async articlesAiPostRaw(requestParameters: ArticlesAiPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticlesAiPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articles/ai`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticlesAiPostRequestToJSON(requestParameters['articlesAiPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesAiPost200ResponseFromJSON(jsonValue));
    }

    /**
     * AIに命令を下して、記事を作成するAPIです
     * 記事AI作成
     */
    async articlesAiPost(requestParameters: ArticlesAiPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticlesAiPost200Response> {
        const response = await this.articlesAiPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AIに命令を下して、記事の内容の更新をするAPIです
     * 記事AI更新
     */
    async articlesArticleIdAiPutRaw(requestParameters: ArticlesArticleIdAiPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticlesArticleIdAiPut200Response>> {
        if (requestParameters['articleId'] == null) {
            throw new runtime.RequiredError(
                'articleId',
                'Required parameter "articleId" was null or undefined when calling articlesArticleIdAiPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articles/{article_id}/ai`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters['articleId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticlesArticleIdAiPutRequestToJSON(requestParameters['articlesArticleIdAiPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesArticleIdAiPut200ResponseFromJSON(jsonValue));
    }

    /**
     * AIに命令を下して、記事の内容の更新をするAPIです
     * 記事AI更新
     */
    async articlesArticleIdAiPut(requestParameters: ArticlesArticleIdAiPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticlesArticleIdAiPut200Response> {
        const response = await this.articlesArticleIdAiPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 記事取得
     */
    async articlesArticleIdGetRaw(requestParameters: ArticlesArticleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticlesArticleIdGet200Response>> {
        if (requestParameters['articleId'] == null) {
            throw new runtime.RequiredError(
                'articleId',
                'Required parameter "articleId" was null or undefined when calling articlesArticleIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles/{article_id}`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters['articleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesArticleIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * 記事取得
     */
    async articlesArticleIdGet(requestParameters: ArticlesArticleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticlesArticleIdGet200Response> {
        const response = await this.articlesArticleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 記事更新
     */
    async articlesArticleIdPutRaw(requestParameters: ArticlesArticleIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['articleId'] == null) {
            throw new runtime.RequiredError(
                'articleId',
                'Required parameter "articleId" was null or undefined when calling articlesArticleIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articles/{article_id}`.replace(`{${"article_id"}}`, encodeURIComponent(String(requestParameters['articleId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticlesPostRequestToJSON(requestParameters['articlesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * 記事更新
     */
    async articlesArticleIdPut(requestParameters: ArticlesArticleIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.articlesArticleIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 記事一覧取得
     */
    async articlesGetRaw(requestParameters: ArticlesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticlesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['searchTitleText'] != null) {
            queryParameters['search_title_text'] = requestParameters['searchTitleText'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * 記事一覧取得
     */
    async articlesGet(requestParameters: ArticlesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticlesGet200Response> {
        const response = await this.articlesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 記事投稿
     */
    async articlesPostRaw(requestParameters: ArticlesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticlesPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticlesPostRequestToJSON(requestParameters['articlesPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * 記事投稿
     */
    async articlesPost(requestParameters: ArticlesPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticlesPost200Response> {
        const response = await this.articlesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * hello
     */
    async helloGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HelloGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HelloGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * hello
     */
    async helloGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HelloGet200Response> {
        const response = await this.helloGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * メディア一覧取得
     */
    async mediaGetRaw(requestParameters: MediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/media`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * メディア一覧取得
     */
    async mediaGet(requestParameters: MediaGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaGet200Response> {
        const response = await this.mediaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * メディアの削除
     */
    async mediaMediumIdDeleteRaw(requestParameters: MediaMediumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['mediumId'] == null) {
            throw new runtime.RequiredError(
                'mediumId',
                'Required parameter "mediumId" was null or undefined when calling mediaMediumIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/media/{medium_id}`.replace(`{${"medium_id"}}`, encodeURIComponent(String(requestParameters['mediumId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * メディアの削除
     */
    async mediaMediumIdDelete(requestParameters: MediaMediumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.mediaMediumIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * メディアの取得
     */
    async mediaMediumIdGetRaw(requestParameters: MediaMediumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaMediumIdGet200Response>> {
        if (requestParameters['mediumId'] == null) {
            throw new runtime.RequiredError(
                'mediumId',
                'Required parameter "mediumId" was null or undefined when calling mediaMediumIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/media/{medium_id}`.replace(`{${"medium_id"}}`, encodeURIComponent(String(requestParameters['mediumId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaMediumIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * メディアの取得
     */
    async mediaMediumIdGet(requestParameters: MediaMediumIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaMediumIdGet200Response> {
        const response = await this.mediaMediumIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * メディアの登録
     */
    async mediaPostRaw(requestParameters: MediaPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MediaPostRequestToJSON(requestParameters['mediaPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * メディアの登録
     */
    async mediaPost(requestParameters: MediaPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaPost200Response> {
        const response = await this.mediaPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 翻訳
     */
    async translationPostRaw(requestParameters: TranslationPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslationPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/translation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranslationPostRequestToJSON(requestParameters['translationPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslationPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * 翻訳
     */
    async translationPost(requestParameters: TranslationPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslationPost200Response> {
        const response = await this.translationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
