/*
folio

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TranslationPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslationPostRequest{}

// TranslationPostRequest struct for TranslationPostRequest
type TranslationPostRequest struct {
	SourceLanguageCode LanguageCode `json:"source_language_code"`
	TargetLanguageCode LanguageCode `json:"target_language_code"`
	// 翻訳するテキスト
	Text string `json:"text"`
}

type _TranslationPostRequest TranslationPostRequest

// NewTranslationPostRequest instantiates a new TranslationPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslationPostRequest(sourceLanguageCode LanguageCode, targetLanguageCode LanguageCode, text string) *TranslationPostRequest {
	this := TranslationPostRequest{}
	this.SourceLanguageCode = sourceLanguageCode
	this.TargetLanguageCode = targetLanguageCode
	this.Text = text
	return &this
}

// NewTranslationPostRequestWithDefaults instantiates a new TranslationPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslationPostRequestWithDefaults() *TranslationPostRequest {
	this := TranslationPostRequest{}
	return &this
}

// GetSourceLanguageCode returns the SourceLanguageCode field value
func (o *TranslationPostRequest) GetSourceLanguageCode() LanguageCode {
	if o == nil {
		var ret LanguageCode
		return ret
	}

	return o.SourceLanguageCode
}

// GetSourceLanguageCodeOk returns a tuple with the SourceLanguageCode field value
// and a boolean to check if the value has been set.
func (o *TranslationPostRequest) GetSourceLanguageCodeOk() (*LanguageCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceLanguageCode, true
}

// SetSourceLanguageCode sets field value
func (o *TranslationPostRequest) SetSourceLanguageCode(v LanguageCode) {
	o.SourceLanguageCode = v
}

// GetTargetLanguageCode returns the TargetLanguageCode field value
func (o *TranslationPostRequest) GetTargetLanguageCode() LanguageCode {
	if o == nil {
		var ret LanguageCode
		return ret
	}

	return o.TargetLanguageCode
}

// GetTargetLanguageCodeOk returns a tuple with the TargetLanguageCode field value
// and a boolean to check if the value has been set.
func (o *TranslationPostRequest) GetTargetLanguageCodeOk() (*LanguageCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetLanguageCode, true
}

// SetTargetLanguageCode sets field value
func (o *TranslationPostRequest) SetTargetLanguageCode(v LanguageCode) {
	o.TargetLanguageCode = v
}

// GetText returns the Text field value
func (o *TranslationPostRequest) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TranslationPostRequest) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TranslationPostRequest) SetText(v string) {
	o.Text = v
}

func (o TranslationPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslationPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_language_code"] = o.SourceLanguageCode
	toSerialize["target_language_code"] = o.TargetLanguageCode
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *TranslationPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_language_code",
		"target_language_code",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTranslationPostRequest := _TranslationPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTranslationPostRequest)

	if err != nil {
		return err
	}

	*o = TranslationPostRequest(varTranslationPostRequest)

	return err
}

type NullableTranslationPostRequest struct {
	value *TranslationPostRequest
	isSet bool
}

func (v NullableTranslationPostRequest) Get() *TranslationPostRequest {
	return v.value
}

func (v *NullableTranslationPostRequest) Set(val *TranslationPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslationPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslationPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslationPostRequest(val *TranslationPostRequest) *NullableTranslationPostRequest {
	return &NullableTranslationPostRequest{value: val, isSet: true}
}

func (v NullableTranslationPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslationPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


