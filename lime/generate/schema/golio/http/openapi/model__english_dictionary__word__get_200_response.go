/*
folio

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnglishDictionaryWordGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnglishDictionaryWordGet200Response{}

// EnglishDictionaryWordGet200Response struct for EnglishDictionaryWordGet200Response
type EnglishDictionaryWordGet200Response struct {
	Origin WordDetail `json:"origin"`
	Translated WordDetail `json:"translated"`
}

type _EnglishDictionaryWordGet200Response EnglishDictionaryWordGet200Response

// NewEnglishDictionaryWordGet200Response instantiates a new EnglishDictionaryWordGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnglishDictionaryWordGet200Response(origin WordDetail, translated WordDetail) *EnglishDictionaryWordGet200Response {
	this := EnglishDictionaryWordGet200Response{}
	this.Origin = origin
	this.Translated = translated
	return &this
}

// NewEnglishDictionaryWordGet200ResponseWithDefaults instantiates a new EnglishDictionaryWordGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnglishDictionaryWordGet200ResponseWithDefaults() *EnglishDictionaryWordGet200Response {
	this := EnglishDictionaryWordGet200Response{}
	return &this
}

// GetOrigin returns the Origin field value
func (o *EnglishDictionaryWordGet200Response) GetOrigin() WordDetail {
	if o == nil {
		var ret WordDetail
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *EnglishDictionaryWordGet200Response) GetOriginOk() (*WordDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *EnglishDictionaryWordGet200Response) SetOrigin(v WordDetail) {
	o.Origin = v
}

// GetTranslated returns the Translated field value
func (o *EnglishDictionaryWordGet200Response) GetTranslated() WordDetail {
	if o == nil {
		var ret WordDetail
		return ret
	}

	return o.Translated
}

// GetTranslatedOk returns a tuple with the Translated field value
// and a boolean to check if the value has been set.
func (o *EnglishDictionaryWordGet200Response) GetTranslatedOk() (*WordDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Translated, true
}

// SetTranslated sets field value
func (o *EnglishDictionaryWordGet200Response) SetTranslated(v WordDetail) {
	o.Translated = v
}

func (o EnglishDictionaryWordGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnglishDictionaryWordGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["origin"] = o.Origin
	toSerialize["translated"] = o.Translated
	return toSerialize, nil
}

func (o *EnglishDictionaryWordGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"origin",
		"translated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnglishDictionaryWordGet200Response := _EnglishDictionaryWordGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnglishDictionaryWordGet200Response)

	if err != nil {
		return err
	}

	*o = EnglishDictionaryWordGet200Response(varEnglishDictionaryWordGet200Response)

	return err
}

type NullableEnglishDictionaryWordGet200Response struct {
	value *EnglishDictionaryWordGet200Response
	isSet bool
}

func (v NullableEnglishDictionaryWordGet200Response) Get() *EnglishDictionaryWordGet200Response {
	return v.value
}

func (v *NullableEnglishDictionaryWordGet200Response) Set(val *EnglishDictionaryWordGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableEnglishDictionaryWordGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableEnglishDictionaryWordGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnglishDictionaryWordGet200Response(val *EnglishDictionaryWordGet200Response) *NullableEnglishDictionaryWordGet200Response {
	return &NullableEnglishDictionaryWordGet200Response{value: val, isSet: true}
}

func (v NullableEnglishDictionaryWordGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnglishDictionaryWordGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


