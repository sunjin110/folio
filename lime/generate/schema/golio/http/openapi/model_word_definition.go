/*
folio

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WordDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WordDefinition{}

// WordDefinition struct for WordDefinition
type WordDefinition struct {
	Definition string `json:"definition"`
	PartOfSpeech string `json:"part_of_speech"`
	Synonyms []string `json:"synonyms"`
	Antonyms []string `json:"antonyms"`
	Examples []string `json:"examples"`
}

type _WordDefinition WordDefinition

// NewWordDefinition instantiates a new WordDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWordDefinition(definition string, partOfSpeech string, synonyms []string, antonyms []string, examples []string) *WordDefinition {
	this := WordDefinition{}
	this.Definition = definition
	this.PartOfSpeech = partOfSpeech
	this.Synonyms = synonyms
	this.Antonyms = antonyms
	this.Examples = examples
	return &this
}

// NewWordDefinitionWithDefaults instantiates a new WordDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWordDefinitionWithDefaults() *WordDefinition {
	this := WordDefinition{}
	return &this
}

// GetDefinition returns the Definition field value
func (o *WordDefinition) GetDefinition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value
// and a boolean to check if the value has been set.
func (o *WordDefinition) GetDefinitionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Definition, true
}

// SetDefinition sets field value
func (o *WordDefinition) SetDefinition(v string) {
	o.Definition = v
}

// GetPartOfSpeech returns the PartOfSpeech field value
func (o *WordDefinition) GetPartOfSpeech() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartOfSpeech
}

// GetPartOfSpeechOk returns a tuple with the PartOfSpeech field value
// and a boolean to check if the value has been set.
func (o *WordDefinition) GetPartOfSpeechOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartOfSpeech, true
}

// SetPartOfSpeech sets field value
func (o *WordDefinition) SetPartOfSpeech(v string) {
	o.PartOfSpeech = v
}

// GetSynonyms returns the Synonyms field value
func (o *WordDefinition) GetSynonyms() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value
// and a boolean to check if the value has been set.
func (o *WordDefinition) GetSynonymsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// SetSynonyms sets field value
func (o *WordDefinition) SetSynonyms(v []string) {
	o.Synonyms = v
}

// GetAntonyms returns the Antonyms field value
func (o *WordDefinition) GetAntonyms() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Antonyms
}

// GetAntonymsOk returns a tuple with the Antonyms field value
// and a boolean to check if the value has been set.
func (o *WordDefinition) GetAntonymsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Antonyms, true
}

// SetAntonyms sets field value
func (o *WordDefinition) SetAntonyms(v []string) {
	o.Antonyms = v
}

// GetExamples returns the Examples field value
func (o *WordDefinition) GetExamples() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value
// and a boolean to check if the value has been set.
func (o *WordDefinition) GetExamplesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Examples, true
}

// SetExamples sets field value
func (o *WordDefinition) SetExamples(v []string) {
	o.Examples = v
}

func (o WordDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WordDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["definition"] = o.Definition
	toSerialize["part_of_speech"] = o.PartOfSpeech
	toSerialize["synonyms"] = o.Synonyms
	toSerialize["antonyms"] = o.Antonyms
	toSerialize["examples"] = o.Examples
	return toSerialize, nil
}

func (o *WordDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"definition",
		"part_of_speech",
		"synonyms",
		"antonyms",
		"examples",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWordDefinition := _WordDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWordDefinition)

	if err != nil {
		return err
	}

	*o = WordDefinition(varWordDefinition)

	return err
}

type NullableWordDefinition struct {
	value *WordDefinition
	isSet bool
}

func (v NullableWordDefinition) Get() *WordDefinition {
	return v.value
}

func (v *NullableWordDefinition) Set(val *WordDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWordDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWordDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWordDefinition(val *WordDefinition) *NullableWordDefinition {
	return &NullableWordDefinition{value: val, isSet: true}
}

func (v NullableWordDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWordDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


