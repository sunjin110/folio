/*
folio

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WordDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WordDetail{}

// WordDetail struct for WordDetail
type WordDetail struct {
	Word string `json:"word"`
	Definitions []WordDefinition `json:"definitions"`
	Frequency float32 `json:"frequency"`
}

type _WordDetail WordDetail

// NewWordDetail instantiates a new WordDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWordDetail(word string, definitions []WordDefinition, frequency float32) *WordDetail {
	this := WordDetail{}
	this.Word = word
	this.Definitions = definitions
	this.Frequency = frequency
	return &this
}

// NewWordDetailWithDefaults instantiates a new WordDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWordDetailWithDefaults() *WordDetail {
	this := WordDetail{}
	return &this
}

// GetWord returns the Word field value
func (o *WordDetail) GetWord() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Word
}

// GetWordOk returns a tuple with the Word field value
// and a boolean to check if the value has been set.
func (o *WordDetail) GetWordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Word, true
}

// SetWord sets field value
func (o *WordDetail) SetWord(v string) {
	o.Word = v
}

// GetDefinitions returns the Definitions field value
func (o *WordDetail) GetDefinitions() []WordDefinition {
	if o == nil {
		var ret []WordDefinition
		return ret
	}

	return o.Definitions
}

// GetDefinitionsOk returns a tuple with the Definitions field value
// and a boolean to check if the value has been set.
func (o *WordDetail) GetDefinitionsOk() ([]WordDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Definitions, true
}

// SetDefinitions sets field value
func (o *WordDetail) SetDefinitions(v []WordDefinition) {
	o.Definitions = v
}

// GetFrequency returns the Frequency field value
func (o *WordDetail) GetFrequency() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *WordDetail) GetFrequencyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *WordDetail) SetFrequency(v float32) {
	o.Frequency = v
}

func (o WordDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WordDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["word"] = o.Word
	toSerialize["definitions"] = o.Definitions
	toSerialize["frequency"] = o.Frequency
	return toSerialize, nil
}

func (o *WordDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"word",
		"definitions",
		"frequency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWordDetail := _WordDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWordDetail)

	if err != nil {
		return err
	}

	*o = WordDetail(varWordDetail)

	return err
}

type NullableWordDetail struct {
	value *WordDetail
	isSet bool
}

func (v NullableWordDetail) Get() *WordDetail {
	return v.value
}

func (v *NullableWordDetail) Set(val *WordDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableWordDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableWordDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWordDetail(val *WordDetail) *NullableWordDetail {
	return &NullableWordDetail{value: val, isSet: true}
}

func (v NullableWordDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWordDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


